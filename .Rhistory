summary(lm(df_removed_predictor))
c(crossprod(df_removed_predictor$residuals))
df_removed_predictor<-df_complete[,c(-1,-7)]
g<lm(df_removed_predictor)
df_removed_predictor<-df_complete[,c(-1,-7)]
g<-lm(df_removed_predictor)
grss<-c(crossprod(g$residuals))
# This model seems to be worse than the one from part 2.1-C because the F-statistic is much lower and the adjusted R^2 value is about 33% lower as well.
df_removed_predictor<-df_complete[,c(-1,-7)]
g<-lm(df_removed_predictor)
grss<-c(crossprod(g$residuals))
grss
# This model seems to be worse than the one from part 2.1-C because the F-statistic is much lower and the adjusted R^2 value is about 33% lower as well.
df_removed_predictor<-df_complete[,c(-1,-7)]
g<-lm(df_removed_predictor)
RSS(g)
df_removed_predictor<-df_complete[,c(-1,-7)]
g<-lm(df_removed_predictor)
plot(residuals(g), main="Residuals")
grss<-c(crossprod(g$residuals))
grss
# This model seems to be worse than the one from part 2.1-C because the F-statistic is much lower and the adjusted R^2 value is about 33% lower as well.
covid_regress_model<-lm( total_deaths ~ . - date, data=df_complete)
plot(residuals(covid_regress_model), main="Residuals")
summary(covid_regress_model)
rss<-c(crossprod(covid_regress_model$residuals))
rss
install.packages('qpcR')
library(qpcR)
RSS(g)
covid_regress_model<-lm( total_deaths ~ . - date, data=df_complete)
plot(residuals(covid_regress_model), main="Residuals")
summary(covid_regress_model)
rss<-c(crossprod(covid_regress_model$residuals))
rss
plot(residuals(train_model), main="Residuals")
plot(residuals(train_model), main="Residuals")
plot(residuals(train_model), main="Residuals of training data")
plot(residuals(new_train_model), main="Residuals for updated model")
library("ISLR")
set.seed(1122)
index <- sample(1:nrow(Auto), .95*dim(Auto)[1])
train.df <-Auto[index,]
test.df <-Auto [-index,]
train_model<- lm(mpg ~. -name,data=train.df)
summary(train_model)
RSS<- c(crossprod(train_model$residuals))
MSE <- RSS/ length(train_model$residuals)
RMSE <- sqrt(MSE)
paste("R2 = .8135, RSE =  3.367, RMSE= ", RMSE)
# The model fits the data well because we see that the R2 value is high, which indicates a strong fit. RSE is also low which means that the residual error doesn't vary a lot, and similar with RMSE which means that the average residual error also doesn't vary as much. RSE and RMSE are close to each other which i will infer as it meaning that between the different residuals the average and error don't deviate a lot. Essentially, these are signs of a model with a good fit.
plot(residuals(train_model), main="Residuals of training data")
hist(train_model$residuals,main="Histogram of training model residuals", xlab="Residuals")
# The distribution is very close to a Gaussian one. It is very slightly skewed to the left. What I can say about the residuals is that most of them are very close to the mean.
# From part a-ii, the most significant predictors are weight, year, and origin.
new_train_model<- lm(mpg ~ weight+year+origin,data=train.df)
summary(new_train_model)
new_RSS<- c(crossprod(new_train_model$residuals))
new_MSE <- new_RSS/ length(new_train_model$residuals)
new_RMSE <- sqrt(new_MSE)
paste("R2 = .8111, RSE =  3.389, RMSE= ", new_RMSE)
# This model fits the data pretty well as the R2 is still high, the RSE and RMSE are pretty close to 0.
plot(residuals(new_train_model), main="Residuals for updated model")
hist(new_train_model$residuals,main="Histogram of new training model residuals", xlab="Residuals")
# There is a Gaussian distribution and it looks like this time there are more residuals closer to positive 15. There also seems to be less negative residuals.
column1<-predict(new_train_model,test.df)
column2<-test.df$mpg
prediction<-data.frame(column1,column2)
prediction
new_column1<-predict(new_train_model,test.df,interval = 'confidence',level=.95)
new_column2<-test.df$mpg
new_prediction<-data.frame(new_column1,new_column2)
new_prediction$Matches<-c(ifelse(new_prediction$new_column2 <= new_prediction$upr & new_prediction$new_column2 >= new_prediction$lwr,1,0))
Num_Matches<-apply(new_prediction["Matches"],2,sum)
new_prediction
paste("Total Observations correctly predicted:", Num_Matches)
newer_column1<-predict(new_train_model,test.df,interval = 'prediction',level=.95)
newer_column2<-test.df$mpg
newer_prediction<-data.frame(newer_column1,newer_column2)
newer_prediction$Matches<-c(ifelse(newer_prediction$newer_column2 <= newer_prediction$upr & newer_prediction$newer_column2 >= newer_prediction$lwr,1,0))
Number_Matches<-apply(newer_prediction["Matches"],2,sum)
newer_prediction
paste("Total Observations correctly predicted:", Number_Matches)
library(rpart)
library(rpart.plot)
model<-rpart(Species~., method="class",data=iris)
rpart.plot(model, extra=104, fallen.leaves=T, type=4, main="Iris Dataset Decision Tree")
vec1 <- c(1, 20, 3, 18, 0, 2, 1)
vec2 = c(1, 18, 4, 1, 8, 10, 1)
which(vec1 == vec2)
vec1 <- c(1, 20, 3, 18, 0, 2, 1)
vec1
vec2 = c(1, 18, 4, 1, 8, 10, 1)
sum(which(vec1 == vec2))
apply(vec1,2,mean)
apply(vec1,1,mean)
apply(vec1+vec2,1,mean)
df<-(vec1,vec2)
df<-(vec1+vec2)
apply(vec1+vec2,1,mean)
apply(df,1,mean)
df
df1<-(c(vec1),c(vec2))
df1<-(c(vec1,vec2))
df1
apply(df1,1,mean)
apply(df1,2,mean)
?frequency
?all
?table
?mean
options("digits"=5)
printcp(model)
df<-read.csv(file="hotel_bookings.csv")
H1_freq<-sum(with(df,hotel=="Resort Hotel"))
H2_freq<-sum(with(df,hotel=="City Hotel"))
paste("There are", H1_freq, "observations for type H1 hotels")
paste("There are", H2_freq, "observations for type H2 hotels")
canceled_freq<-sum(with(df,is_canceled==1))
not_cancelled_freq<-sum(with(df,is_canceled==0))
paste("Number of guests who canceled reservation:", canceled_freq)
paste("Number of guests who did not cancel the reservation:", not_cancelled_freq)
max_type<-max(df$customer_type)
num_max_type<-sum(df$customer_type=="Transient-Party")
paste("Customer type with the most reservations is", max_type, "with", num_max_type, "reservations")
max_spaces<-max(df$required_car_parking_spaces)
num_max_spaces<-sum(with(df,required_car_parking_spaces==max_spaces))
paste( num_max_spaces, "customers required the most number of parking spaces (",max_spaces,").")
min_spaces<-min(df$required_car_parking_spaces)
num_min_spaces<-sum(with(df,required_car_parking_spaces==min_spaces))
paste( num_min_spaces, "customers required the least number of parking spaces (",min_spaces,").")
matching_room<-sum(with(df, reserved_room_type==assigned_room_type))
percent_matching<-signif(((matching_room/nrow(df))*100),digits=4)
paste(percent_matching, "of the people who expressed a room preference during reservation got the room during check-in.")
city_hotels<- subset(df, hotel=="City Hotel" & country != "NULL"  )
top10_count_forH2<-tail(sort(table(city_hotels$country)),n=10)
barplot(top10_count_forH2,col=rainbow(n=10),ylab = "Number of City Hotels",xlab="Country",main= "10 Countries with most City Hotel Bookings")
resort_hotels<-subset(df,hotel=="Resort Hotel" & country != "NULL")
top10_count_forH1<-tail(sort(table(resort_hotels$country)),n=10)
barplot(top10_count_forH1,col=rainbow(n=10),ylab = "Number of Resort Hotels",xlab="Country",main= "10 Countries with most Resort Hotel Bookings")
paste("The country with most visitors to either type of hotel is: Portugal")
library("ISLR")
set.seed(1122)
index <- sample(1:nrow(df), .90*dim(df)[1])
train.df <-df[index,]
test.df <-df[-index,]
library(rpart)
library(rpart.plot)
model<-rpart(is_canceled~lead_time+market_segment+distribution_channel+previous_cancellations+deposit_type+customer_type+required_car_parking_spaces+total_of_special_requests, method="class",data=train.df)
rpart.plot(model, extra=104, fallen.leaves=T, type=4, main="Hotel Booking Decsion Tree")
#The most important variables are: deposit_type,total_of_special_requests,lead_time,previous_cancellations,market_segment,customer_type,distribution_channel,required_car_parking_spaces,
library(caret)
my_prediction<-predict(model,test.df,type="class")
myMat<-confusionMatrix(my_prediction,as.factor(test.df$is_canceled),positive='1')
myMat
paste("Accuracy:" ,.809, "Error:",.191,"Balanced Accuracy:", .768, "Specificity:",.930,"Sensitivity:",.605,"Precision:",.838)
pred.rocr<-predict(model,newdata = test.df,type="prob")[,2]
f.pred<-prediction(pred.rocr, test.df$is_canceled)
df<-read.csv(file="hotel_bookings.csv")
H1_freq<-sum(with(df,hotel=="Resort Hotel"))
H2_freq<-sum(with(df,hotel=="City Hotel"))
paste("There are", H1_freq, "observations for type H1 hotels")
paste("There are", H2_freq, "observations for type H2 hotels")
canceled_freq<-sum(with(df,is_canceled==1))
not_cancelled_freq<-sum(with(df,is_canceled==0))
paste("Number of guests who canceled reservation:", canceled_freq)
paste("Number of guests who did not cancel the reservation:", not_cancelled_freq)
max_type<-max(df$customer_type)
num_max_type<-sum(df$customer_type=="Transient-Party")
paste("Customer type with the most reservations is", max_type, "with", num_max_type, "reservations")
max_spaces<-max(df$required_car_parking_spaces)
num_max_spaces<-sum(with(df,required_car_parking_spaces==max_spaces))
paste( num_max_spaces, "customers required the most number of parking spaces (",max_spaces,").")
min_spaces<-min(df$required_car_parking_spaces)
num_min_spaces<-sum(with(df,required_car_parking_spaces==min_spaces))
paste( num_min_spaces, "customers required the least number of parking spaces (",min_spaces,").")
matching_room<-sum(with(df, reserved_room_type==assigned_room_type))
percent_matching<-signif(((matching_room/nrow(df))*100),digits=4)
paste(percent_matching, "of the people who expressed a room preference during reservation got the room during check-in.")
city_hotels<- subset(df, hotel=="City Hotel" & country != "NULL"  )
top10_count_forH2<-tail(sort(table(city_hotels$country)),n=10)
barplot(top10_count_forH2,col=rainbow(n=10),ylab = "Number of City Hotels",xlab="Country",main= "10 Countries with most City Hotel Bookings")
resort_hotels<-subset(df,hotel=="Resort Hotel" & country != "NULL")
top10_count_forH1<-tail(sort(table(resort_hotels$country)),n=10)
barplot(top10_count_forH1,col=rainbow(n=10),ylab = "Number of Resort Hotels",xlab="Country",main= "10 Countries with most Resort Hotel Bookings")
paste("The country with most visitors to either type of hotel is: Portugal")
library("ISLR")
set.seed(1122)
index <- sample(1:nrow(df), .90*dim(df)[1])
train.df <-df[index,]
test.df <-df[-index,]
library(rpart)
library(rpart.plot)
model<-rpart(is_canceled~lead_time+market_segment+distribution_channel+previous_cancellations+deposit_type+customer_type+required_car_parking_spaces+total_of_special_requests, method="class",data=train.df)
rpart.plot(model, extra=104, fallen.leaves=T, type=4, main="Hotel Booking Decsion Tree")
#The most important variables are: deposit_type,total_of_special_requests,lead_time,previous_cancellations,market_segment,customer_type,distribution_channel,required_car_parking_spaces,
library(caret)
my_prediction<-predict(model,test.df,type="class")
myMat<-confusionMatrix(my_prediction,as.factor(test.df$is_canceled),positive='1')
myMat
paste("Accuracy:" ,.809, "Error:",.191,"Balanced Accuracy:", .768, "Specificity:",.930,"Sensitivity:",.605,"Precision:",.838)
library(ROCR)
pred.rocr<-predict(model,newdata = test.df,type="prob")[,2]
f.pred<-prediction(pred.rocr, test.df$is_canceled)
f.perf <- performance(f.pred, "tpr", "fpr")
plot(f.perf, colorize=T, lwd=3)
abline(0,1)
auc <- performance(f.pred, measure = "auc")
cat(paste("The area under curve (AUC) for this model is ", round(auc@y.values[[1]], 3)))
set.seed(1122)
index <- sample(1:nrow(df), .90*dim(df)[1])
new_train.df <-df[index,]
new_test.df <-df[-index,]
new_model<-rpart(is_canceled~lead_time+market_segment+distribution_channel+previous_cancellations+deposit_type+customer_type+required_car_parking_spaces+total_of_special_requests,method="class",data=new_train.df,control = rpart.control(cp = 0.0))
new_pred<-predict(new_model,new_test.df,type="class")
new_Mat<-confusionMatrix(new_pred,as.factor(new_test.df$is_canceled),positive='1')
new_Mat
cat("Before Pruning:\n  Accuracy: 0.821\n  Error: 0.179\n  Balanced Acc.: 0.793\n  Specificity: 0.904\n  Sensitivity: 0.682\n  Precision: 0.808")
options("digits"=5)
printcp(model)
cpx=new_model$cptable[which.min(new_model$cptable[,"xerror"]), "CP"]
cpx
ptree<-prune(new_model,cp=cpx)
paste("Prune point occurs at a complexity of", round(cpx,5))
paste("At this complexity, xerror is",round(min(new_model$cptable[,"xerror"]),5))
pruned_pred<-predict(ptree,new_test.df,type="class")
prune_Mat<-confusionMatrix(pruned_pred,as.factor(new_test.df$is_canceled),positive='1')
prune_Mat
cat("After Pruning:\n  Accuracy: 0.823\n  Error: 0.179\n  Balanced Acc.: 0.792\n  Specificity: 0.916\n  Sensitivity: 0.668\n  Precision: 0.825")
printcp(model)
cpx=new_model$cptable[which.min(new_model$cptable[,"xerror"]), "CP"]
ptree<-prune(new_model,cp=cpx)
paste("Prune point occurs at a complexity of", round(cpx,5))
paste("At this complexity, xerror is",round(min(new_model$cptable[,"xerror"]),5))
set.seed(1122)
index <- sample(1:nrow(df), .90*dim(df)[1])
new_train.df <-df[index,]
new_test.df <-df[-index,]
new_model<-rpart(is_canceled~lead_time+market_segment+distribution_channel+previous_cancellations+deposit_type+customer_type+required_car_parking_spaces+total_of_special_requests,method="class",data=new_train.df,control = rpart.control(cp = 0.0))
new_pred<-predict(new_model,new_test.df,type="class")
new_Mat<-confusionMatrix(new_pred,as.factor(new_test.df$is_canceled),positive='1')
new_Mat
summary(new_model)
cat("Before Pruning:\n  Accuracy: 0.821\n  Error: 0.179\n  Balanced Acc.: 0.793\n  Specificity: 0.904\n  Sensitivity: 0.682\n  Precision: 0.808")
set.seed(1122)
index <- sample(1:nrow(df), .90*dim(df)[1])
new_train.df <-df[index,]
new_test.df <-df[-index,]
new_model<-rpart(is_canceled~lead_time+market_segment+distribution_channel+previous_cancellations+deposit_type+customer_type+required_car_parking_spaces+total_of_special_requests,method="class",data=new_train.df,control = rpart.control(cp = 0.0))
new_pred<-predict(new_model,new_test.df,type="class")
new_Mat<-confusionMatrix(new_pred,as.factor(new_test.df$is_canceled),positive='1')
new_Mat
cat("Before Pruning:\n  Accuracy: 0.821\n  Error: 0.179\n  Balanced Acc.: 0.793\n  Specificity: 0.904\n  Sensitivity: 0.682\n  Precision: 0.808")
options("digits"=5)
printcp(new_model)
cpx=new_model$cptable[which.min(new_model$cptable[,"xerror"]), "CP"]
ptree<-prune(new_model,cp=cpx)
paste("Prune point occurs at a complexity of", round(cpx,5))
paste("At this complexity, xerror is",round(min(new_model$cptable[,"xerror"]),5))
library(ROCR)
pred.rocr<-predict(model,newdata = test.df,type="prob")[,4]
library(ROCR)
pred.rocr<-predict(model,newdata = test.df,type="prob")[,3]
library(ROCR)
pred.rocr<-predict(model,newdata = test.df,type="prob")[,2]
f.pred<-prediction(pred.rocr, test.df$is_canceled)
f.perf <- performance(f.pred, "tpr", "fpr")
plot(f.perf, colorize=T, lwd=3)
abline(0,1)
df<-read.csv(file="hotel_bookings.csv")
H1_freq<-sum(with(df,hotel=="Resort Hotel"))
H2_freq<-sum(with(df,hotel=="City Hotel"))
paste("There are", H1_freq, "observations for type H1 hotels")
paste("There are", H2_freq, "observations for type H2 hotels")
canceled_freq<-sum(with(df,is_canceled==1))
not_cancelled_freq<-sum(with(df,is_canceled==0))
paste("Number of guests who canceled reservation:", canceled_freq)
paste("Number of guests who did not cancel the reservation:", not_cancelled_freq)
max_type<-max(df$customer_type)
num_max_type<-sum(df$customer_type=="Transient-Party")
paste("Customer type with the most reservations is", max_type, "with", num_max_type, "reservations")
max_spaces<-max(df$required_car_parking_spaces)
num_max_spaces<-sum(with(df,required_car_parking_spaces==max_spaces))
paste( num_max_spaces, "customers required the most number of parking spaces (",max_spaces,").")
min_spaces<-min(df$required_car_parking_spaces)
num_min_spaces<-sum(with(df,required_car_parking_spaces==min_spaces))
paste( num_min_spaces, "customers required the least number of parking spaces (",min_spaces,").")
matching_room<-sum(with(df, reserved_room_type==assigned_room_type))
percent_matching<-signif(((matching_room/nrow(df))*100),digits=4)
paste(percent_matching, "of the people who expressed a room preference during reservation got the room during check-in.")
city_hotels<- subset(df, hotel=="City Hotel" & country != "NULL"  )
top10_count_forH2<-tail(sort(table(city_hotels$country)),n=10)
barplot(top10_count_forH2,col=rainbow(n=10),ylab = "Number of City Hotels",xlab="Country",main= "10 Countries with most City Hotel Bookings")
resort_hotels<-subset(df,hotel=="Resort Hotel" & country != "NULL")
top10_count_forH1<-tail(sort(table(resort_hotels$country)),n=10)
barplot(top10_count_forH1,col=rainbow(n=10),ylab = "Number of Resort Hotels",xlab="Country",main= "10 Countries with most Resort Hotel Bookings")
paste("The country with most visitors to either type of hotel is: Portugal")
library("ISLR")
set.seed(1122)
index <- sample(1:nrow(df), .90*dim(df)[1])
train.df <-df[index,]
test.df <-df[-index,]
library(rpart)
library(rpart.plot)
model<-rpart(is_canceled~lead_time+market_segment+distribution_channel+previous_cancellations+deposit_type+customer_type+required_car_parking_spaces+total_of_special_requests, method="class",data=train.df)
rpart.plot(model, extra=104, fallen.leaves=T, type=4, main="Hotel Booking Decsion Tree")
#The most important variables are: deposit_type,total_of_special_requests,lead_time,previous_cancellations,market_segment,customer_type,distribution_channel,required_car_parking_spaces,
library(caret)
my_prediction<-predict(model,test.df,type="class")
myMat<-confusionMatrix(my_prediction,as.factor(test.df$is_canceled),positive='1')
myMat
paste("Accuracy:" ,.809, "Error:",.191,"Balanced Accuracy:", .768, "Specificity:",.930,"Sensitivity:",.605,"Precision:",.838)
library(ROCR)
pred.rocr<-predict(model,newdata = test.df,type="prob")[,2]
f.pred<-prediction(pred.rocr, test.df$is_canceled)
f.perf <- performance(f.pred, "tpr", "fpr")
plot(f.perf, colorize=T, lwd=3)
abline(0,1)
auc <- performance(f.pred, measure = "auc")
cat(paste("The area under curve (AUC) for this model is ", round(auc@y.values[[1]], 3)))
set.seed(1122)
index <- sample(1:nrow(df), .90*dim(df)[1])
new_train.df <-df[index,]
new_test.df <-df[-index,]
new_model<-rpart(is_canceled~lead_time+market_segment+distribution_channel+previous_cancellations+deposit_type+customer_type+required_car_parking_spaces+total_of_special_requests,method="class",data=new_train.df,control = rpart.control(cp = 0.0))
new_pred<-predict(new_model,new_test.df,type="class")
new_Mat<-confusionMatrix(new_pred,as.factor(new_test.df$is_canceled),positive='1')
new_Mat
cat("Before Pruning:\n  Accuracy: 0.821\n  Error: 0.179\n  Balanced Acc.: 0.793\n  Specificity: 0.904\n  Sensitivity: 0.682\n  Precision: 0.808")
cpx=new_model$cptable[which.min(new_model$cptable[,"xerror"]), "CP"] #(Code courtesy of Dr. Gurbani: diabetes.Rmd)
ptree<-prune(new_model,cp=cpx)
paste("Prune point occurs at a complexity of", round(cpx,5))
paste("At this complexity, xerror is",round(min(new_model$cptable[,"xerror"]),5))
pruned_pred<-predict(ptree,new_test.df,type="class")
prune_Mat<-confusionMatrix(pruned_pred,as.factor(new_test.df$is_canceled),positive='1')
prune_Mat
cat("After Pruning:\n  Accuracy: 0.823\n  Error: 0.179\n  Balanced Acc.: 0.792\n  Specificity: 0.916\n  Sensitivity: 0.668\n  Precision: 0.825")
library(ROCR)
pred.rocr<-predict(model,newdata = test.df,type="prob")[,2]
f.pred<-prediction(pred.rocr, test.df$is_canceled)
f.perf <- performance(f.pred, "tpr", "fpr")
plot(f.perf, colorize=T, lwd=6)
abline(0,1)
library(ROCR)
pred.rocr<-predict(model,newdata = test.df,type="prob")[,2]
f.pred<-prediction(pred.rocr, test.df$is_canceled)
f.perf <- performance(f.pred, "tpr", "fpr")
plot(f.perf, colorize=T, lwd=3)
abline(0,1)
print(pred.rocr)
summary(pred.rocr)
library(ROCR)
pred.rocr<-predict(model,newdata = test.df,type="prob")[,2]
f.pred<-prediction(pred.rocr, test.df$is_canceled)
f.perf <- performance(f.pred, "tpr", "fpr")
plot(f.perf, colorize=T, lwd=3)
abline(0,1)
df<-read.csv(file="hotel_bookings.csv")
H1_freq<-sum(with(df,hotel=="Resort Hotel"))
H2_freq<-sum(with(df,hotel=="City Hotel"))
paste("There are", H1_freq, "observations for type H1 hotels")
paste("There are", H2_freq, "observations for type H2 hotels")
canceled_freq<-sum(with(df,is_canceled==1))
not_cancelled_freq<-sum(with(df,is_canceled==0))
paste("Number of guests who canceled reservation:", canceled_freq)
paste("Number of guests who did not cancel the reservation:", not_cancelled_freq)
max_type<-max(df$customer_type)
num_max_type<-sum(df$customer_type=="Transient-Party")
paste("Customer type with the most reservations is", max_type, "with", num_max_type, "reservations")
max_spaces<-max(df$required_car_parking_spaces)
num_max_spaces<-sum(with(df,required_car_parking_spaces==max_spaces))
paste( num_max_spaces, "customers required the most number of parking spaces (",max_spaces,").")
min_spaces<-min(df$required_car_parking_spaces)
num_min_spaces<-sum(with(df,required_car_parking_spaces==min_spaces))
paste( num_min_spaces, "customers required the least number of parking spaces (",min_spaces,").")
matching_room<-sum(with(df, reserved_room_type==assigned_room_type))
percent_matching<-signif(((matching_room/nrow(df))*100),digits=4)
paste(percent_matching, "of the people who expressed a room preference during reservation got the room during check-in.")
city_hotels<- subset(df, hotel=="City Hotel" & country != "NULL"  )
top10_count_forH2<-tail(sort(table(city_hotels$country)),n=10)
barplot(top10_count_forH2,col=rainbow(n=10),ylab = "Number of City Hotels",xlab="Country",main= "10 Countries with most City Hotel Bookings")
resort_hotels<-subset(df,hotel=="Resort Hotel" & country != "NULL")
top10_count_forH1<-tail(sort(table(resort_hotels$country)),n=10)
barplot(top10_count_forH1,col=rainbow(n=10),ylab = "Number of Resort Hotels",xlab="Country",main= "10 Countries with most Resort Hotel Bookings")
paste("The country with most visitors to either type of hotel is: Portugal")
library("ISLR")
set.seed(1122)
index <- sample(1:nrow(df), .90*dim(df)[1])
train.df <-df[index,]
test.df <-df[-index,]
library(rpart)
library(rpart.plot)
model<-rpart(is_canceled~lead_time+market_segment+distribution_channel+previous_cancellations+deposit_type+customer_type+required_car_parking_spaces+total_of_special_requests, method="class",data=train.df)
rpart.plot(model, extra=104, fallen.leaves=T, type=4, main="Hotel Booking Decsion Tree")
#The most important variables are: deposit_type,total_of_special_requests,lead_time,previous_cancellations,market_segment,customer_type,distribution_channel,required_car_parking_spaces,
library(caret)
my_prediction<-predict(model,test.df,type="class")
myMat<-confusionMatrix(my_prediction,as.factor(test.df$is_canceled),positive='1')
myMat
paste("Accuracy:" ,.809, "Error:",.191,"Balanced Accuracy:", .768, "Specificity:",.930,"Sensitivity:",.605,"Precision:",.838)
library(ROCR)
pred.rocr<-predict(model,newdata = test.df,type="prob")[,2]
f.pred<-prediction(pred.rocr, test.df$is_canceled)
f.perf <- performance(f.pred, "tpr", "fpr")
plot(f.perf, colorize=T, lwd=3)
abline(0,1)
auc <- performance(f.pred, measure = "auc")
cat(paste("The area under curve (AUC) for this model is ", round(auc@y.values[[1]], 3)))
set.seed(1122)
index <- sample(1:nrow(df), .90*dim(df)[1])
new_train.df <-df[index,]
new_test.df <-df[-index,]
new_model<-rpart(is_canceled~lead_time+market_segment+distribution_channel+previous_cancellations+deposit_type+customer_type+required_car_parking_spaces+total_of_special_requests,method="class",data=new_train.df,control = rpart.control(cp = 0.0))
new_pred<-predict(new_model,new_test.df,type="class")
new_Mat<-confusionMatrix(new_pred,as.factor(new_test.df$is_canceled),positive='1')
new_Mat
cat("Before Pruning:\n  Accuracy: 0.821\n  Error: 0.179\n  Balanced Acc.: 0.793\n  Specificity: 0.904\n  Sensitivity: 0.682\n  Precision: 0.808")
cpx=new_model$cptable[which.min(new_model$cptable[,"xerror"]), "CP"] #(Code courtesy of Dr. Gurbani: diabetes.Rmd)
ptree<-prune(new_model,cp=cpx)
paste("Prune point occurs at a complexity of", round(cpx,5))
paste("At this complexity, xerror is",round(min(new_model$cptable[,"xerror"]),5))
pruned_pred<-predict(ptree,new_test.df,type="class")
prune_Mat<-confusionMatrix(pruned_pred,as.factor(new_test.df$is_canceled),positive='1')
prune_Mat
cat("After Pruning:\n  Accuracy: 0.823\n  Error: 0.177\n  Balanced Acc.: 0.792\n  Specificity: 0.916\n  Sensitivity: 0.668\n  Precision: 0.825")
cat("The pruned tree generalzies better.")
cat("The ")
cat("The best tree is the pruned tree because it has the least error and is still almost as precise as the tree in 2.2")
remove.packages("tensorflow")
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
> tf$constant(“Hello Tensorflow”)
tf$constant(“Hello Tensorflow”)
tf$constant(“Hello Tensorflow”)
tf$constant("Hello Tensorflow")
install_tensorflow()
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
remove.packages("tensorflow")
remove.packages("tensorflow")
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
install_tensorflow()
install_tensorflow()
library(tensorflow)
install_tensorflow()
install.packages("tensorflow")
install.packages("tensorflow")
library(tensorflow)
install.packages("tensorflow")
install.packages("tensorflow")
install_tensorflow()
library(tensorflow)
install_tensorflow()
library(tensorflow)
install_tensorflow()
remove.packages("tensorflow")
remove.packages("tensorflow")
remove.packages("tensorflow")
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
install_tensorflow()
library(tensorflow)
install_tensorflow()
library(tensorflow)
install_tensorflow()
install.packages("tensorflow")
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
library(tensorflow)
install_tensorflow()
library(tensorflow)
install_tensorflow()
remove.packages("tensorflow")
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
remove.packages("tensorflow")
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
remove.packages("tensorflow")
install.packages("tensorflow")
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
remove.packages("tensorflow")
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
remove.packages("tensorflow")
remove.packages("tensorflow")
install.packages("tensorflow")
library(tensorflow)
library(tensorflow)
install_tensorflow()
tf$constant("Hello Tensorflow")
tf$constant("Hello Tensorflow")
remove.packages("keras")
install.packages("keras")
library(keras)
keras
tf
setwd("~/RStuff")
source("~/RStuff/iris-nn.r")
library(keras)
quit()
